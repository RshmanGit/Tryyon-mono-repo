// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Admin {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  username           String    @unique
  firstname          String
  lastname           String
  phone              Int       @unique
  email              String    @unique
  passwordHash       String
  token              String?
  approved           Boolean   @default(false)
  email_verified     Boolean   @default(false)
  verificationCode   String?
  verificationExpiry DateTime?
  role               Role?     @relation(fields: [roleId], references: [id])
  roleId             String?   @db.ObjectId
}

model Role {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  title       String  @unique
  adminRoles  Json[]
  tenantRoles Json[]
  admins      Admin[]
  User        User[]
}

model Product {
  id                String           @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  description       String?
  shortDescriptions String?
  slug              String
  quantity          Int              @default(0)
  supplier          Tenant           @relation(fields: [supplierId], references: [id])
  supplierId        String           @db.ObjectId
  published         Boolean          @default(false)
  attributes        Json
  categories        Category[]       @relation(fields: [categoryIds], references: [id])
  categoryIds       String[]         @db.ObjectId
  SKU               SKU[]
  manufacturer      String
  locations         Location[]       @relation(fields: [locationIds], references: [id])
  locationIds       String[]         @db.ObjectId
  countryOfOrigin   String
  trending          Boolean          @default(false)
  featuredFrom      DateTime
  featuredTo        DateTime
  guestCheckout     Boolean          @default(false)
  private_product   Boolean          @default(false)
  marketPlace       Boolean          @default(false)
  ProductImports    ProductImports[]
  reseller          Json?
}

model SKU {
  id               String           @id @default(auto()) @map("_id") @db.ObjectId
  slug             String
  quantity         Int              @default(0)
  product          Product          @relation(fields: [productId], references: [id])
  productId        String           @db.ObjectId
  supplier         Tenant           @relation(fields: [supplierId], references: [id])
  supplierId       String           @db.ObjectId
  published        Boolean          @default(false)
  attributes       Json
  categories       Category[]       @relation(fields: [categoryIds], references: [id])
  categoryIds      String[]         @db.ObjectId
  price            Float
  discountedPrice  Float
  ProductImports   ProductImports[] @relation(fields: [productImportIds], references: [id])
  productImportIds String[]         @db.ObjectId
}

model Category {
  id               String     @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  description      String?
  slug             String
  root             Boolean    @default(false)
  parentCategoryId String?    @db.ObjectId
  parentCategory   Category?  @relation("CategoryTree", fields: [parentCategoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children         Category[] @relation("CategoryTree")
  products         Product[]  @relation(fields: [productIds], references: [id])
  productIds       String[]   @db.ObjectId
  sku              SKU[]      @relation(fields: [skuId], references: [id])
  skuId            String[]   @db.ObjectId
}

model Attribute {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  slug        String
}

model Tenant {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  description    String?
  company        Company          @relation(fields: [companyId], references: [id])
  companyId      String           @unique @db.ObjectId
  Associations   Associations[]
  Product        Product[]
  SKU            SKU[]
  Location       Location[]
  productImports ProductImports[]
}

model Company {
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  description    String?
  gstNumber      String  @unique
  gstCertificate String?
  panNumber      String  @unique
  panCard        String?
  aadharNumber   String  @unique
  aadharCard     String?
  adminApproval  Boolean @default(false)
  owner          User    @relation(fields: [ownerId], references: [id])
  ownerId        String  @unique
  tenant         Tenant?
}

model User {
  id                 String        @id @default(auto()) @map("_id") @db.ObjectId
  username           String        @unique
  firstname          String
  lastname           String
  phone              Int           @unique
  email              String        @unique
  passwordHash       String
  token              String?
  email_verified     Boolean       @default(false)
  verificationCode   String?
  verificationExpiry DateTime?
  associations       Associations?
  company            Company?
  role               Role?         @relation(fields: [roleId], references: [id])
  roleId             String?       @db.ObjectId
}

model Associations {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  user     User    @relation(fields: [userId], references: [id])
  userId   String  @unique @db.ObjectId
  tenant   Tenant  @relation(fields: [tenantId], references: [id])
  tenantId String  @db.ObjectId
  approval Boolean @default(false)
}

model Location {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  address    String
  pincode    String
  state      String
  country    String
  tenant     Tenant    @relation(fields: [tenantId], references: [id])
  tenantId   String    @db.ObjectId
  products   Product[] @relation(fields: [productIds], references: [id])
  productIds String[]  @db.ObjectId
}

model ProductImports {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  type      String
  skus      SKU[]    @relation(fields: [skuIds], references: [id])
  skuIds    String[] @db.ObjectId
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
  tenantId  String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id])
  productId String   @db.ObjectId
  status    Boolean  @default(false)
  override  Json
}
